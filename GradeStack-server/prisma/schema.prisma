generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  LEARNER
  INSTRUCTOR
  INSTRUCTOR_LEAD
  ADMIN
  SUPPORTER
}

model User {
  id String @id @default(uuid())

  email     String @unique
  firstName String
  lastName  String
  password  String

  isVerified Boolean @default(false)
  isBlocked  Boolean @default(false)

  role                  Role    @default(LEARNER)
  requirePasswordChange Boolean @default(false)
  warningCount          Int?    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Instructor              Instructor?
  Comment                 Comment[]
  Note                    Note[]
  PurchaseHistory         PurchaseHistory[]
  CourseFeedback          CourseFeedback[]
  Bookmark                Bookmark[]
  EnrolledCourse          EnrolledCourse[]
  Attendance              Attendance[]
  SubmittedCodingExercise SubmittedCodingExercise[]
  SubmittedFinalTest      SubmittedFinalTest[]
  Certificate             Certificate[]
  completedLessons        CompletedLesson[]
}

model Instructor {
  user   User   @relation(fields: [userId], references: [id])
  userId String @id

  organization String
  avatar       String?
  bio          String?
  socials      String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Course       Course[]
  Wallet       Wallet?
  Workshop     Workshop[]
  Topic        Topic[]
  LearningPath LearningPath[]
  BankInfo     BankInfo?
}

model Course {
  id            String  @id @default(uuid())
  title         String
  description   String
  price         Decimal @default(0.00)
  duration      Int     @default(0)
  isPublished   Boolean @default(false)
  thumbnail     String?
  averageRating Float?  @default(0)

  instructor   Instructor @relation(fields: [instructorId], references: [userId])
  instructorId String

  modules Module[]

  PurchaseHistory PurchaseHistory[]
  CourseFeedback  CourseFeedback[]
  Bookmark        Bookmark[]
  EnrolledCourse  EnrolledCourse[]
  Certificate     Certificate[]

  CourseTopic        CourseTopic[]
  LearningPathCourse LearningPathCourse[]
  completedLessons   CompletedLesson[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model Module {
  id          String   @id @default(uuid())
  title       String
  description String
  order       Int // Thứ tự trong khóa học
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    String
  lessons     Lesson[]

  // Video information fields
  videoUrl      String?
  thumbnailUrl  String?
  videoDuration Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LessonType {
  VIDEO
  CODING
  FINAL_TEST
}

model Lesson {
  id       String @id @default(uuid())
  module   Module @relation(fields: [moduleId], references: [id])
  moduleId String

  title       String
  description String
  lessonType  LessonType
  duration    Int? // Dành cho video hoặc estimated time
  isPreview   Boolean    @default(false) // Instructor đánh dấu nội dung xem trước
  order       Int        @default(1) // Thứ tự bài học trong module

  video     VideoLesson?
  coding    CodingExercise?
  finalTest FinalTestLesson?

  comments         Comment[]
  notes            Note[]
  completedLessons CompletedLesson[]

  createdAt DateTime @default(now())
}

model Comment {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  lesson   Lesson @relation(fields: [lessonId], references: [id])
  lessonId String

  content   String
  createdAt DateTime @default(now())

  parentComment   Comment? @relation("ParentChild", fields: [parentCommentId], references: [id])
  parentCommentId String?

  replies Comment[] @relation("ParentChild")
}

model Note {
  id String @id @default(uuid())

  content   String
  timestamp Int // Thời điểm trong video (giây)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  lesson   Lesson @relation(fields: [lessonId], references: [id])
  lessonId String

  createdAt DateTime @default(now())
}

model VideoLesson {
  id           String  @id @default(uuid())
  lesson       Lesson  @relation(fields: [lessonId], references: [id])
  lessonId     String  @unique
  url          String
  thumbnailUrl String?
  duration     Int
}

enum SupportedLanguage {
  PYTHON
  C
  JAVA
}

model CodingExercise {
  id       String @id @default(uuid())
  lesson   Lesson @relation(fields: [lessonId], references: [id])
  lessonId String @unique

  language                SupportedLanguage
  problem                 String
  hint                    String?
  solution                String
  codeSnippet             String?
  SubmittedCodingExercise SubmittedCodingExercise[]
}

model FinalTestLesson {
  id       String @id @default(uuid())
  lesson   Lesson @relation(fields: [lessonId], references: [id])
  lessonId String @unique

  estimatedDuration Int?
  passingScore      Int  @default(70)

  questions          Question[]
  SubmittedFinalTest SubmittedFinalTest[]
}

model Question {
  id     String          @id @default(uuid())
  test   FinalTestLesson @relation(fields: [testId], references: [id])
  testId String

  content String
  order   Int

  answers Answer[]
}

model Answer {
  id         String   @id @default(uuid())
  question   Question @relation(fields: [questionId], references: [id])
  questionId String

  content   String
  isCorrect Boolean
}

model PurchaseHistory {
  id          String   @id @default(uuid())
  learner     User     @relation(fields: [learnerId], references: [id])
  learnerId   String
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    String
  price       Decimal
  purchasedAt DateTime @default(now())
}

model Wallet {
  id           String        @id @default(uuid())
  instructor   Instructor    @relation(fields: [instructorId], references: [userId])
  instructorId String        @unique
  balance      Decimal       @default(0.00)
  transactions Transaction[]
}

enum TransactionType {
  REVENUE
  WITHDRAWAL
}

enum TransactionStatus {
  PENDING
  APPROVED
  REJECTED
}

model Transaction {
  id        String            @id @default(uuid())
  wallet    Wallet            @relation(fields: [walletId], references: [id])
  walletId  String
  amount    Decimal
  type      TransactionType
  status    TransactionStatus @default(PENDING)
  qrCodeUrl String?
  createdAt DateTime          @default(now())
}

model CourseFeedback {
  id        String   @id @default(uuid())
  learner   User     @relation(fields: [learnerId], references: [id])
  learnerId String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  @@unique([learnerId, courseId])
}

model Bookmark {
  id String @id @default(uuid())

  learner   User   @relation(fields: [learnerId], references: [id])
  learnerId String

  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  createdAt DateTime @default(now())

  @@unique([learnerId, courseId])
}

model EnrolledCourse {
  id String @id @default(uuid())

  learner   User   @relation(fields: [learnerId], references: [id])
  learnerId String

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  progress   Int      @default(0)
  enrolledAt DateTime @default(now())

  @@unique([learnerId, courseId])
}

model Topic {
  id          String  @id @default(uuid())
  name        String  @unique
  thumbnail   String?
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses CourseTopic[]

  Instructor       Instructor? @relation(fields: [instructorUserId], references: [userId])
  instructorUserId String?
}

model CourseTopic {
  id       String @id @default(uuid())
  course   Course @relation(fields: [courseId], references: [id])
  courseId String
  topic    Topic  @relation(fields: [topicId], references: [id])
  topicId  String

  @@unique([courseId, topicId])
}

model LearningPath {
  id               String               @id @default(uuid())
  title            String
  description      String?
  thumbnail        String?
  courses          LearningPathCourse[]
  Instructor       Instructor?          @relation(fields: [instructorUserId], references: [userId])
  instructorUserId String?
}

model LearningPathCourse {
  id             String       @id @default(uuid())
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id])
  learningPathId String
  course         Course       @relation(fields: [courseId], references: [id])
  courseId       String
  order          Int

  @@unique([learningPathId, courseId])
}

model Workshop {
  id          String   @id @default(uuid())
  title       String
  description String
  scheduledAt DateTime
  duration    Int // Thời gian workshop (phút)
  meetUrl     String? // URL Google Meet
  thumbnail   String? // Hình ảnh thumbnail
  autoGenerateMeet Boolean @default(true) // Tự động tạo Google Meet URL

  instructor   Instructor @relation(fields: [instructorId], references: [userId])
  instructorId String

  attendees Attendance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendance {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  workshop   Workshop @relation(fields: [workshopId], references: [id])
  workshopId String

  attendedAt DateTime @default(now())
  notified   Boolean @default(false) // Đã gửi email thông báo chưa

  @@unique([userId, workshopId])
}

model SubmittedCodingExercise {
  id String @id @default(uuid())

  learner   User   @relation(fields: [learnerId], references: [id])
  learnerId String

  codingExercise   CodingExercise @relation(fields: [codingExerciseId], references: [id])
  codingExerciseId String

  submittedCode String
  submittedAt   DateTime @default(now())

  @@unique([learnerId, codingExerciseId])
}

model SubmittedFinalTest {
  id String @id @default(uuid())

  learner   User   @relation(fields: [learnerId], references: [id])
  learnerId String

  finalTest   FinalTestLesson @relation(fields: [finalTestId], references: [id])
  finalTestId String

  score       Int
  submittedAt DateTime @default(now())

  @@unique([learnerId, finalTestId])
}

model Certificate {
  id String @id @default(uuid())

  learner   User   @relation(fields: [learnerId], references: [id])
  learnerId String

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  issuedAt       DateTime @default(now()) // Ngày cấp chứng chỉ
  certificateUrl String // Đường dẫn chứng chỉ (PDF hoặc hình ảnh)

  @@unique([learnerId, courseId]) // Đảm bảo mỗi học viên chỉ có một chứng chỉ cho mỗi khóa học
}

//meta data only
model Order {
  orderCode Int @id @unique

  courseId     String
  userId       String
  instructorId String

  amount Decimal
  status String  @default("PENDING")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CompletedLesson {
  id String @id @default(uuid())

  learner   User   @relation(fields: [learnerId], references: [id])
  learnerId String

  lesson   Lesson @relation(fields: [lessonId], references: [id])
  lessonId String

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  completedAt DateTime @default(now())

  @@unique([learnerId, lessonId])
  @@index([courseId]) // Thêm index để tối ưu query
  @@index([learnerId, courseId]) // Thêm composite index để tối ưu việc tìm kiếm completed lessons của user trong một khóa học
}

model BankInfo {
  id String @id @default(uuid())

  bankName      String
  accountNumber String
  accountName   String
  isActive      Boolean @default(true)

  instructor   Instructor @relation(fields: [instructorId], references: [userId])
  instructorId String     @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  LEARNER
  INSTRUCTOR
  INSTRUCTOR_LEAD
  ADMIN
  SUPPORTER
}

model User {
  id String @id @default(uuid())

  email     String @unique
  firstName String
  lastName  String
  password  String

  isVerified Boolean @default(false)
  isBlocked  Boolean @default(false)

  role Role @default(LEARNER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  instructor                Instructor?
  comments                  Comment[]
  notes                     Note[]
  purchaseHistory           PurchaseHistory[]
  courseFeedbacks           CourseFeedback[]
  bookmarks                 Bookmark[]
  enrolledCourses           EnrolledCourse[]
  attendances               Attendance[]
  submittedCodingExercises  SubmittedCodingExercise[]
  submittedFinalTests       SubmittedFinalTest[]
  certificates              Certificate[]
}

model Instructor {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @id

  organization String
  avatar       String
  bio          String
  socials      String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses   Course[]
  wallet    Wallet?
  workshops Workshop[]
}

model Course {
  id          String  @id @default(uuid())
  title       String
  description String
  price       Decimal @default(0.00) @db.Decimal(10, 2)
  duration    Int     @default(0) // Tổng thời gian (phút)
  isPublished Boolean @default(false)

  instructor   Instructor @relation(fields: [instructorId], references: [userId], onDelete: Cascade)
  instructorId String

  modules Module[]

  purchaseHistory PurchaseHistory[]
  courseFeedbacks CourseFeedback[]
  bookmarks       Bookmark[]
  enrolledCourses EnrolledCourse[]
  certificates    Certificate[]

  courseTopics       CourseTopic[]
  learningPathCourses LearningPathCourse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Module {
  id          String   @id @default(uuid())
  title       String
  description String
  order       Int // Thứ tự trong khóa học
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  lessons     Lesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LessonType {
  VIDEO
  CODING
  FINAL_TEST
}

model Lesson {
  id       String @id @default(uuid())
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId String

  title       String
  description String
  lessonType  LessonType
  duration    Int? // Dành cho video hoặc estimated time
  isPreview   Boolean    @default(false) // Instructor đánh dấu nội dung xem trước

  video     VideoLesson?
  coding    CodingExercise?
  finalTest FinalTestLesson?

  comments Comment[]
  notes    Note[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String

  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parentComment   Comment? @relation("ParentChild", fields: [parentCommentId], references: [id], onDelete: SetNull)
  parentCommentId String?

  replies Comment[] @relation("ParentChild")
}

model Note {
  id String @id @default(uuid())

  content   String
  timestamp Int // Thời điểm trong video (giây)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VideoLesson {
  id       String @id @default(uuid())
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String @unique
  url      String
  duration Int
}

enum SupportedLanguage {
  PYTHON
  C
  JAVA
}

model CodingExercise {
  id       String @id @default(uuid())
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String @unique

  language                SupportedLanguage
  problem                 String
  hint                    String?
  solution                String
  codeSnippet             String?
  submittedCodingExercises SubmittedCodingExercise[]
}

model FinalTestLesson {
  id       String @id @default(uuid())
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String @unique

  estimatedDuration Int?

  questions          Question[]
  submittedFinalTests SubmittedFinalTest[]
}

model Question {
  id     String          @id @default(uuid())
  test   FinalTestLesson @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId String

  content String
  order   Int

  answers Answer[]
}

model Answer {
  id         String   @id @default(uuid())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String

  content   String
  isCorrect Boolean
}

model PurchaseHistory {
  id          String   @id @default(uuid())
  learner     User     @relation(fields: [learnerId], references: [id], onDelete: Cascade)
  learnerId   String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  price       Decimal  @db.Decimal(10, 2)
  purchasedAt DateTime @default(now())
}

model Wallet {
  id           String        @id @default(uuid())
  instructor   Instructor    @relation(fields: [instructorId], references: [userId], onDelete: Cascade)
  instructorId String        @unique
  balance      Decimal       @default(0.00) @db.Decimal(10, 2)
  transactions Transaction[]
}

enum TransactionType {
  REVENUE
  WITHDRAWAL
}

enum TransactionStatus {
  PENDING
  APPROVED
  REJECTED
}

model Transaction {
  id        String            @id @default(uuid())
  wallet    Wallet            @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId  String
  amount    Decimal           @db.Decimal(10, 2)
  type      TransactionType
  status    TransactionStatus @default(PENDING)
  createdAt DateTime          @default(now())
}

model CourseFeedback {
  id        String   @id @default(uuid())
  learner   User     @relation(fields: [learnerId], references: [id], onDelete: Cascade)
  learnerId String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  @@unique([learnerId, courseId])
}

model Bookmark {
  id String @id @default(uuid())

  learner   User   @relation(fields: [learnerId], references: [id], onDelete: Cascade)
  learnerId String

  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  createdAt DateTime @default(now())

  @@unique([learnerId, courseId])
}

model EnrolledCourse {
  id String @id @default(uuid())

  learner   User   @relation(fields: [learnerId], references: [id], onDelete: Cascade)
  learnerId String

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  progress   Int      @default(0)
  enrolledAt DateTime @default(now())

  @@unique([learnerId, courseId])
}

model Topic {
  id          String  @id @default(uuid())
  name        String  @unique
  thumbnail   String?
  description String?

  courseTopics CourseTopic[]
}

model CourseTopic {
  id       String @id @default(uuid())
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String
  topic    Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId  String

  @@unique([courseId, topicId])
}

model LearningPath {
  id          String               @id @default(uuid())
  title       String
  description String?
  thumbnail   String?
  courses     LearningPathCourse[]
}

model LearningPathCourse {
  id             String       @id @default(uuid())
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  learningPathId String
  course         Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId       String
  order          Int

  @@unique([learningPathId, courseId])
}

model Workshop {
  id          String   @id @default(uuid())
  title       String
  description String
  scheduledAt DateTime
  duration    Int // Thời gian workshop (phút)

  instructor   Instructor @relation(fields: [instructorId], references: [userId], onDelete: Cascade)
  instructorId String

  attendees Attendance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendance {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  workshop   Workshop @relation(fields: [workshopId], references: [id], onDelete: Cascade)
  workshopId String

  attendedAt DateTime @default(now())

  @@unique([userId, workshopId])
}

model SubmittedCodingExercise {
  id String @id @default(uuid())

  learner   User   @relation(fields: [learnerId], references: [id], onDelete: Cascade)
  learnerId String

  codingExercise   CodingExercise @relation(fields: [codingExerciseId], references: [id], onDelete: Cascade)
  codingExerciseId String

  submittedCode String
  submittedAt   DateTime @default(now())

  @@unique([learnerId, codingExerciseId])
}

model SubmittedFinalTest {
  id String @id @default(uuid())

  learner   User   @relation(fields: [learnerId], references: [id], onDelete: Cascade)
  learnerId String

  finalTest   FinalTestLesson @relation(fields: [finalTestId], references: [id], onDelete: Cascade)
  finalTestId String

  score       Int
  submittedAt DateTime @default(now())

  @@unique([learnerId, finalTestId])
}

model Certificate {
  id String @id @default(uuid())

  learner   User   @relation(fields: [learnerId], references: [id], onDelete: Cascade)
  learnerId String

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  issuedAt       DateTime @default(now()) // Ngày cấp chứng chỉ
  certificateUrl String // Đường dẫn chứng chỉ (PDF hoặc hình ảnh)

  @@unique([learnerId, courseId]) // Đảm bảo mỗi học viên chỉ có một chứng chỉ cho mỗi khóa học
}